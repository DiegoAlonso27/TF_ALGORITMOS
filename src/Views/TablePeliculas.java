/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views;

/**
 *
 * @author diego
 */
public class TablePeliculas extends javax.swing.JPanel {

    /**
     * Creates new form TablePeliculas
     */
    public TablePeliculas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblpeliculas = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        txtbuscar = new javax.swing.JTextField();
        btnbuscar = new javax.swing.JToggleButton();
        cbotipo = new javax.swing.JComboBox<>();
        btnlimpiar = new javax.swing.JToggleButton();
        btnagregar = new javax.swing.JToggleButton();

        tblpeliculas.setBackground(new java.awt.Color(51, 51, 51));
        tblpeliculas.setForeground(new java.awt.Color(255, 255, 255));
        tblpeliculas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblpeliculas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblpeliculasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblpeliculas);

        jLabel6.setFont(new java.awt.Font("Century", 1, 24)); // NOI18N
        jLabel6.setText("Películas");

        jPanel6.setBackground(new java.awt.Color(153, 255, 153));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bucar Película", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        txtbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtbuscarActionPerformed(evt);
            }
        });

        btnbuscar.setBackground(new java.awt.Color(51, 51, 51));
        btnbuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnbuscar.setText("Buscar");
        btnbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarActionPerformed(evt);
            }
        });

        cbotipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tipo de Busqueda", "Lineal", "Binaria" }));

        btnlimpiar.setBackground(new java.awt.Color(51, 51, 51));
        btnlimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btnlimpiar.setText("Limpiar");
        btnlimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlimpiarActionPerformed(evt);
            }
        });

        btnagregar.setBackground(new java.awt.Color(51, 51, 51));
        btnagregar.setForeground(new java.awt.Color(255, 255, 255));
        btnagregar.setText("Agregar");
        btnagregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnagregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cbotipo, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnlimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnagregar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtbuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnbuscar)
                    .addComponent(cbotipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnlimpiar)
                    .addComponent(btnagregar))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(352, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addContainerGap(353, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(57, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(365, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblpeliculasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblpeliculasMouseClicked
        int selectedRow = tblpeliculas.getSelectedRow();
        if (selectedRow != -1) {
            txtnombre.setText(dt.getValueAt(selectedRow, 0).toString());
            txtduracion.setText(dt.getValueAt(selectedRow, 1).toString());
            cbogenero.setSelectedItem(dt.getValueAt(selectedRow, 2).toString());
            txtrecaudo.setText(dt.getValueAt(selectedRow, 3).toString());
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDate fecha = LocalDate.parse(dt.getValueAt(selectedRow, 4).toString(), formatter);
            jdfecha.setDate(Date.from(fecha.atStartOfDay(ZoneId.systemDefault()).toInstant()));
        }
    }//GEN-LAST:event_tblpeliculasMouseClicked

    private void btnbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarActionPerformed
        // Obtiene el término de búsqueda ingresado por el usuario
        String terminoBusqueda = txtbuscar.getText().trim();

        // Verifica si los datos originales han sido guardados
        if (!datosGuardados) {
            guardarDatosOriginales();
        }

        // Verifica si el término de búsqueda está vacío
        if (terminoBusqueda.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un término de búsqueda.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Crea un objeto de búsqueda con el término de búsqueda y el tipo seleccionado
            Busqueda busqueda = new Busqueda(terminoBusqueda, cbotipo.getSelectedItem().toString());
            LinkedList<Peliculas> resultados;

            // Realiza la búsqueda según el tipo seleccionado
            if (busqueda.getTipo().equalsIgnoreCase("Lineal")) {
                resultados = Busca.buscarPeliculasPorNombreLineal(listaPeliculas, busqueda);
            } else if (busqueda.getTipo().equalsIgnoreCase("Binaria")) {
                ArbolBinarioBusqueda arbol = new ArbolBinarioBusqueda();
                for (Peliculas pelicula : listaPeliculas) {
                    arbol.insertar(pelicula);
                }
                resultados = arbol.buscar(terminoBusqueda);
            } else {
                JOptionPane.showMessageDialog(this, "Tipo de búsqueda no válido.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Muestra los resultados de la búsqueda en la tabla
            if (resultados.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No se encontraron películas que coincidan con la búsqueda.", "Información", JOptionPane.INFORMATION_MESSAGE);
            } else {
                dt.setRowCount(0); // Limpiar la tabla
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                for (Peliculas pelicula : resultados) {
                    String duracionFormatted = String.format("%02d:%02d", pelicula.getDuracion().toHours(), pelicula.getDuracion().toMinutesPart());
                    String fechaEstrenoStr = pelicula.getFecheEstreno().toInstant().atZone(ZoneId.systemDefault()).toLocalDate().format(formatter);
                    dt.addRow(new Object[]{pelicula.getNombre(), duracionFormatted, pelicula.getGenero(), pelicula.getTotalRecaudado(), fechaEstrenoStr});
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al realizar la búsqueda: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        txtbuscar.setText("");
    }//GEN-LAST:event_btnbuscarActionPerformed

    private void btnlimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlimpiarActionPerformed

        // Verifica si los datos originales han sido guardados
        if (datosGuardados) {
            dt.setRowCount(0); // Limpiar la tabla
            // Restaura los datos originales en la tabla
            for (Object[] fila : datosOriginales) {
                dt.addRow(fila);
            }
            // Limpia los campos de entrada de datos
            limpiarCampos();
        } else {
            JOptionPane.showMessageDialog(this, "No hay datos originales guardados.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnlimpiarActionPerformed

    private void txtbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtbuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtbuscarActionPerformed

    private void btnagregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnagregarActionPerformed

        // Obtiene los datos de la interfaz de usuario
        String nombre = txtnombre.getText().trim();
        String duracionStr = txtduracion.getText().trim();
        String genero = cbogenero.getSelectedItem().toString();
        String totalRecaudadoStr = txtrecaudo.getText().trim();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        // Valida que el campo 'Nombre' no esté vacío
        if (nombre.isEmpty()) {
            JOptionPane.showMessageDialog(this, "El campo 'Nombre' no puede estar vacío.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Convierte y valida el formato de la duración
        Duration duracion;
        try {
            String[] durParts = duracionStr.split(":");
            if (durParts.length != 2) {
                throw new NumberFormatException();
            }
            int horas = Integer.parseInt(durParts[0]);
            int minutos = Integer.parseInt(durParts[1]);
            duracion = Duration.ofHours(horas).plusMinutes(minutos);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El formato de la duración debe ser HH:MM.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Convierte y valida el formato del total recaudado
        double totalRecaudado;
        try {
            totalRecaudado = Double.parseDouble(totalRecaudadoStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El campo 'Total Recaudado' debe ser un número válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Convierte y valida la fecha de estreno
        LocalDate fechaEstreno;
        try {
            fechaEstreno = jdfecha.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "La fecha de estreno no puede estar vacía.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Formatea la fecha de estreno y la duración
        String fechaEstrenoStr = fechaEstreno.format(formatter);
        Date fechaEstrenoDate = Date.from(fechaEstreno.atStartOfDay(ZoneId.systemDefault()).toInstant());
        String duracionFormatted = String.format("%02d:%02d", duracion.toHours(), duracion.toMinutesPart());

        // Crea una nueva película y la añade a la lista de películas
        Peliculas pelicula = new Peliculas(nombre, duracion, genero, totalRecaudado, fechaEstrenoDate);
        listaPeliculas.add(pelicula);

        // Actualiza la tabla con la nueva película y limpia los campos
        guardarDatosEnArchivo();
        actualizarTabla();
        limpiarCampos();
    }//GEN-LAST:event_btnagregarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnagregar;
    private javax.swing.JToggleButton btnbuscar;
    private javax.swing.JToggleButton btnlimpiar;
    private javax.swing.JComboBox<String> cbotipo;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblpeliculas;
    private javax.swing.JTextField txtbuscar;
    // End of variables declaration//GEN-END:variables
}
